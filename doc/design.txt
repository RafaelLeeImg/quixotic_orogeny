OS design note

Could you list around 100 POSIX APIs shall I mostly care when I write the. RTOS?
ChatGPT
Certainly! Here's a list of approximately 100 POSIX APIs that are commonly used when developing an RTOS. These APIs cover various aspects such as process/thread management, synchronization, inter-process communication, file I/O, memory management, and time management:

1, pthread_create
2, pthread_join
3, pthread_detach
4, pthread_exit
5, pthread_self
6, pthread_cancel
7, pthread_mutex_init
8, pthread_mutex_destroy
9, pthread_mutex_lock
10, pthread_mutex_trylock
11, pthread_mutex_unlock
12, pthread_rwlock_init
13, pthread_rwlock_destroy
14, pthread_rwlock_rdlock
15, pthread_rwlock_wrlock
16, pthread_rwlock_unlock
17, pthread_cond_init
18, pthread_cond_destroy
19, pthread_cond_wait
20, pthread_cond_timedwait
21, pthread_cond_signal
22, pthread_cond_broadcast
23, pthread_barrier_init
24, pthread_barrier_destroy
25, pthread_barrier_wait
26, pthread_spin_init
27, pthread_spin_destroy
28, pthread_spin_lock
29, pthread_spin_trylock
30, pthread_spin_unlock
31, sem_init
32, sem_destroy
33, sem_wait
34, sem_trywait
35, sem_post
36, sem_getvalue
37, shm_open
38, shm_unlink
39, mmap
40, munmap
41, mprotect
42, msync
43, msgget
44, msgctl
45, msgsnd
46, msgrcv
47, mq_open
48, mq_close
49, mq_unlink
50, mq_send
51, mq_receive
52, mq_getattr
53, mq_setattr
54, pipe
55, pipe2
56, dup
57, dup2
58, read
59, write
60, close
61, fcntl
62, opendir
63, readdir
64, closedir
65, fork
66, exec
67, wait
68, waitpid
69, kill
70, signal
71, sigaction
72, sigprocmask
73, sigwait
74, sigsuspend
75, usleep
76, sleep
77, nanosleep
78, clock_gettime
79, clock_settime
80, clock_nanosleep
81, time
82, gettimeofday
83, timer_create
84, timer_delete
85, timer_settime
86, timer_gettime
87, sched_yield
88, sched_get_priority_max
89, sched_get_priority_min
90, sched_getparam
91, sched_setparam
92, sched_rr_get_interval
93, getpriority
94, setpriority
95, uname
96, gethostname
97, getcwd
98, chdir
99, access
100, stat


# semaphore
31, sem_init
33, sem_wait
34, sem_trywait
36, sem_getvalue
35, sem_post
37, shm_open
32, sem_destroy
38, shm_unlink


# pthread

1, pthread_create
2, pthread_join
3, pthread_detach
4, pthread_exit
5, pthread_self
6, pthread_cancel
7, pthread_mutex_init
8, pthread_mutex_destroy
9, pthread_mutex_lock
10, pthread_mutex_trylock
11, pthread_mutex_unlock
12, pthread_rwlock_init
13, pthread_rwlock_destroy
14, pthread_rwlock_rdlock
15, pthread_rwlock_wrlock
16, pthread_rwlock_unlock
17, pthread_cond_init
18, pthread_cond_destroy
19, pthread_cond_wait
20, pthread_cond_timedwait
21, pthread_cond_signal
22, pthread_cond_broadcast
23, pthread_barrier_init
24, pthread_barrier_destroy
25, pthread_barrier_wait
26, pthread_spin_init
27, pthread_spin_destroy
28, pthread_spin_lock
29, pthread_spin_trylock
30, pthread_spin_unlock




65, fork
66, exec
67, wait
68, waitpid
69, kill
70, signal
71, sigaction
72, sigprocmask
73, sigwait
74, sigsuspend
75, usleep
76, sleep



# name
quixotic_orogeny


## scheduler

There are several types of schedulers used in operating systems, each designed to meet different performance goals and requirements. The main types of schedulers include:

First-Come, First-Served (FCFS): This is one of the simplest scheduling algorithms, where processes are executed in the order they arrive. It is non-preemptive and does not prioritize processes based on their characteristics.

Shortest Job Next (SJN) or Shortest Job First (SJF): This algorithm selects the process with the shortest burst time next for execution. It can be either preemptive (Shortest Remaining Time First - SRTF) or non-preemptive.

Priority Scheduling: Processes are assigned priorities, and the scheduler selects the process with the highest priority for execution. It can be either preemptive or non-preemptive. There are variants like static priority scheduling and dynamic priority scheduling.

Round Robin (RR): In this algorithm, each process is assigned a fixed time slice (quantum) for execution. If a process does not finish within its time slice, it is preempted, and the CPU is given to the next process in the queue.

Multi-Level Queue (MLQ): This scheduler organizes processes into multiple queues based on their priority or other characteristics. Each queue may have its own scheduling algorithm (e.g., FCFS, RR), and processes move between queues based on predefined criteria.

Multi-Level Feedback Queue (MLFQ): This is an extension of the MLQ scheduler where processes can move between queues dynamically based on their behavior and resource requirements. Aging is used to prevent starvation of low-priority processes.

Fair-Share Scheduling: This scheduler ensures that system resources are distributed fairly among users or groups based on predefined shares or weights assigned to them.

Deadline Scheduling: Processes are assigned deadlines, and the scheduler ensures that they are completed within their deadlines. Real-time operating systems often use this scheduler to guarantee timely execution of critical tasks.

Earliest Deadline First (EDF): This is a real-time scheduling algorithm where processes are scheduled based on their absolute deadlines. The process with the earliest deadline is scheduled next.

Weighted Fair Queuing (WFQ): This is a network scheduler that ensures fair allocation of bandwidth among network flows based on their weights or priorities.

These are some of the commonly used scheduling algorithms and techniques in operating systems. Each scheduler has its advantages, disadvantages, and suitability for different types of workloads and system requirements. Operating systems may use a combination of these schedulers or employ sophisticated scheduling policies to optimize resource utilization, responsiveness, and fairness.



## processes
Only the memory of stack needs to be considered, heap are all in main memory region.

